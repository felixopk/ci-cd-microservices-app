name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install root dependencies
        run: |
          if [ -f package.json ]; then
            npm install || true
          fi

      - name: Run ESLint at root (ignore failure if not found)
        run: |
          npx eslint . || echo "ESLint failed or not configured."

      - name: Install dependencies for user-service
        run: |
          cd user-service
          npm install

      - name: Run tests for user-service
        run: |
          cd user-service
          npm test || echo "Tests failed or none specified."

      - name: Lint code for user-service
        run: |
          cd user-service
          npm run lint || echo "Linting failed or not configured."

      - name: Install dependencies for task-service
        run: |
          cd task-service
          npm install

      - name: Run tests for task-service
        run: |
          cd task-service
          npm test || echo "Tests failed or none specified."

      - name: Lint code for task-service
        run: |
          cd task-service
          npm run lint || echo "Linting failed or not configured."

      - name: Build Docker images
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/user-service ./user-service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/task-service ./task-service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend ./frontend

      - name: Push Docker images to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker push $DOCKER_USERNAME/user-service
          docker push $DOCKER_USERNAME/task-service
          docker push $DOCKER_USERNAME/frontend

  deploy:
    runs-on: ubuntu-latest
    needs: backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.21.0'

      - name: Set up Kubernetes context
        run: |
          kubectl config set-cluster my-cluster --server=${{ secrets.KUBE_SERVER }} --certificate-authority=${{ secrets.KUBE_CA }}
          kubectl config set-credentials my-user --token=${{ secrets.KUBE_TOKEN }}
          kubectl config set-context my-context --cluster=my-cluster --user=my-user
          kubectl config use-context my-context

      - name: Deploy all K8s manifests
        run: |
          kubectl apply -f k8s/
