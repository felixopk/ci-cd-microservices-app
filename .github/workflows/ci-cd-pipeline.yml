name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Run on push to the main branch.
  pull_request:
    branches:
      - main  # Run on PR to the main branch

jobs:
  # Build and test the backend services (user-service & task-service)
  backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies for user-service
        run: |
          cd user-service
          npm install

      - name: Run tests for user-service
        run: |
          cd user-service
          npm test

      - name: Install dependencies for task-service
        run: |
          cd task-service
          npm install

      - name: Run tests for task-service
        run: |
          cd task-service
          npm test

      - name: Lint code for user-service
        run: |
          cd user-service
          npm run lint

      - name: Lint code for task-service
        run: |
          cd task-service
          npm run lint

      - name: Build Docker images
        run: |
          docker build -t user-service ./user-service
          docker build -t task-service ./task-service
          docker build -t frontend ./frontend

      - name: Push Docker images to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker push user-service
          docker push task-service
          docker push frontend

  # Deploy to Kubernetes
  deploy:
    runs-on: ubuntu-latest
    needs: backend  # This will wait until the backend job is done

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v2
        with:
          kubectl-version: 'v1.21.0'

      - name: Set up Kubernetes context
        run: |
          kubectl config set-cluster my-cluster --server=${{ secrets.KUBE_SERVER }} --certificate-authority=${{ secrets.KUBE_CA }}
          kubectl config set-credentials my-user --token=${{ secrets.KUBE_TOKEN }}
          kubectl config set-context my-context --cluster=my-cluster --user=my-user
          kubectl config use-context my-context

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/
